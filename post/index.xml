<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Jun's Blog</title><link>https://www.junz.org/post/</link><description>Recent content in Posts on Jun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 15 Aug 2023 23:45:13 +0800</lastBuildDate><atom:link href="https://www.junz.org/post/index.xml" rel="self" type="application/rss+xml"/><item><title>OS 学习记 之 XV6</title><link>https://www.junz.org/post/xv6_os/</link><pubDate>Tue, 15 Aug 2023 23:45:13 +0800</pubDate><guid>https://www.junz.org/post/xv6_os/</guid><description>XV6 是 MIT6.S081 操作系统这门课中使用的实验操作系统内核。它的作者之一就是大名鼎鼎的 Robert Morris，世界上第一个蠕虫病毒 Morris 就是出自他之手。XV6 传承了 Unix</description></item><item><title>如何编译 GraalVM</title><link>https://www.junz.org/post/build_graalvm/</link><pubDate>Thu, 27 Jul 2023 23:45:13 +0800</pubDate><guid>https://www.junz.org/post/build_graalvm/</guid><description>下面记录了我如何在 Linux (Ubuntu22.04 LTS) 上编译 GraalVM 的步骤。 1 2 3 4 5 6 7 8 9 10 11 12 mkdir lava # 创建一个工作区 git clone https://github.com/graalvm/mx.git # 下载编译用的工具 git clone https://github.com/graalvm/graal.git # 下载源代码 export PATH=$(pwd)/mx:$PATH # 将 mx 加到</description></item><item><title>LLVM 中端优化之 InstCombine</title><link>https://www.junz.org/post/llvm_instcombine/</link><pubDate>Tue, 18 Jul 2023 16:45:13 +0800</pubDate><guid>https://www.junz.org/post/llvm_instcombine/</guid><description>InstCombine 是 LLVM 中的一个窥孔式的优化，为 LLVM 在 canonicalize IR 过程中的一个重要组成部分。这个 Pass 的主要目的就是尽可能地根据数学规则合并优化 IR，同时将 IR 归一化。 代码实</description></item><item><title>C++ 中 inline 关键字的语义</title><link>https://www.junz.org/post/cpp_inline/</link><pubDate>Tue, 11 Jul 2023 23:45:13 +0800</pubDate><guid>https://www.junz.org/post/cpp_inline/</guid><description>C++ 真的是非常地混乱和难学，本文中我会简单谈谈 inline 在 C++ 中的含义和作用。 优化器眼里的 inline 在这一层语境下，inline 是指将在函数调用处将函数体展开，</description></item><item><title>链接与库</title><link>https://www.junz.org/post/linker_and_library/</link><pubDate>Fri, 03 Mar 2023 16:32:13 +0800</pubDate><guid>https://www.junz.org/post/linker_and_library/</guid><description>虚拟内存 我们首先要对平时所说的内存要有一个清楚的认知，那就是我们所谈的实际上都是虚拟内存，不是操纵真实的物理内存。在没有安装操作系统的裸机上</description></item><item><title>C++ 移动语义基础</title><link>https://www.junz.org/post/cpp_move_semantics/</link><pubDate>Tue, 21 Feb 2023 16:19:35 +0800</pubDate><guid>https://www.junz.org/post/cpp_move_semantics/</guid><description>移动语义的作用 直接看一个例子： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include &amp;lt;iostream&amp;gt; struct S { S() { std::cout &amp;lt;&amp;lt; &amp;#34;S()\n&amp;#34;; } S(const S&amp;amp;) { std::cout &amp;lt;&amp;lt; &amp;#34;S(const S&amp;amp;)\n&amp;#34;; } ~S() { std::cout &amp;lt;&amp;lt; &amp;#34;~S()\n&amp;#34;; } }; S foo() { return S(); } int main() { foo(); } 用以下</description></item><item><title>如何优化矩阵相乘</title><link>https://www.junz.org/post/how_to_optimize_gemm/</link><pubDate>Thu, 16 Feb 2023 23:50:26 +0800</pubDate><guid>https://www.junz.org/post/how_to_optimize_gemm/</guid><description>本文中所有的优化策略源自 How To Optimize Gemm，感谢 Prof. Robert van de Geijn 教授及其团队的付出！❤ 我对原有的代码进行了一些改动，并放在了 junaire/HowToOptimizeGEMM 中。 矩阵相乘的定义 假设给</description></item><item><title>2022年度总结</title><link>https://www.junz.org/post/2022_year_summary/</link><pubDate>Sat, 31 Dec 2022 11:53:20 +0800</pubDate><guid>https://www.junz.org/post/2022_year_summary/</guid><description>对过去的回顾 回看下我一年前年度总结中的对今年的愿景，大多是达到了，这是我比较满意的一方面。在过去的一年中我做的最重要的一件事，可能也是会将改</description></item><item><title>CUDA初学笔记</title><link>https://www.junz.org/post/introduction_to_cuda/</link><pubDate>Tue, 22 Nov 2022 17:03:28 +0800</pubDate><guid>https://www.junz.org/post/introduction_to_cuda/</guid><description>1 2 3 4 5 6 7 8 9 __global__ void Kernel(float* A, int N) { int x = blockIdx.x * blockDim.x + threadIdx.x; if (x &amp;lt; N) A[x] = 1; } int main() { // ... Kernel&amp;lt;&amp;lt;&amp;lt;2,32&amp;gt;&amp;gt;&amp;gt;(A, 64); } 上面是一个简单的 CUDA 例子，其中初始化了一个长度为64的单精度浮</description></item><item><title>汇编语言之保护模式</title><link>https://www.junz.org/post/asm_protectmode/</link><pubDate>Tue, 08 Nov 2022 15:14:16 +0800</pubDate><guid>https://www.junz.org/post/asm_protectmode/</guid><description>保护模式与实模式 我们这里说的保护模式特指 IA-32 处理器上的32位保护模式。在保护模式下，所有的32位处理器都可以访问最多2^32字节，也就是4GB</description></item><item><title>汇编语言之实模式</title><link>https://www.junz.org/post/asm_realmode/</link><pubDate>Sun, 06 Nov 2022 23:45:13 +0800</pubDate><guid>https://www.junz.org/post/asm_realmode/</guid><description>基础知识 在进入主题前，先总结下关于二进制的一些知识点，我个人认为这非常的令人困惑： 1 bit, 指1位，0或者1 1 byte, 指1个字节，有8位 1 word, 指1个字，有</description></item><item><title>浅析 libc++ 中的 string 实现</title><link>https://www.junz.org/post/libcxx_string/</link><pubDate>Sat, 13 Aug 2022 13:33:39 +0800</pubDate><guid>https://www.junz.org/post/libcxx_string/</guid><description>std::string 也许是 C++ 程序员最常用的标准库数据结构之一了，用了这么久的 std::string，它内部究竟是如何实现的？究竟什么是SSO (Small String Optimiz</description></item><item><title>std::expected 基本使用</title><link>https://www.junz.org/post/expected_in_cxx23/</link><pubDate>Mon, 09 May 2022 23:52:21 +0800</pubDate><guid>https://www.junz.org/post/expected_in_cxx23/</guid><description>最近看cppreference的编译器支持的时候发现libstdc++已经实现&amp;lt;expected&amp;gt;了，可惜的是在网上看了一下发现</description></item><item><title>C++模板基础</title><link>https://www.junz.org/post/cxx_templates/</link><pubDate>Sun, 27 Feb 2022 20:39:40 +0800</pubDate><guid>https://www.junz.org/post/cxx_templates/</guid><description>函数模板 先看几个简单的例子了解下函数模板是如何使用的： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 template&amp;lt;typename T&amp;gt; T max(T a, T b) { return b &amp;lt; a ? a : b; } max(1,2); // 隐式指定了模板实参</description></item><item><title>CSAPP第九章笔记之虚拟内存</title><link>https://www.junz.org/post/csapp_chap9/</link><pubDate>Tue, 15 Feb 2022 20:09:20 +0800</pubDate><guid>https://www.junz.org/post/csapp_chap9/</guid><description>虚拟内存 一个系统有很多进程，本质上每个进程都与其它进程共享主存。但是如果直接让每个进程自由访问整个物理内存，将非常危险且麻烦： 一个进程可能有</description></item><item><title>CSAPP第八章笔记之异常控制流</title><link>https://www.junz.org/post/csapp_chap8/</link><pubDate>Thu, 27 Jan 2022 22:21:28 +0800</pubDate><guid>https://www.junz.org/post/csapp_chap8/</guid><description>异常控制流 硬件层上，硬件检测到的事件会触发控制突然转移到异常控制程序。 操作系统层面上，内核通过上下文切换将控制从一个用户进程转移到另一个用户</description></item><item><title>2021年度总结</title><link>https://www.junz.org/post/2021_year_summary/</link><pubDate>Sun, 02 Jan 2022 22:33:50 +0800</pubDate><guid>https://www.junz.org/post/2021_year_summary/</guid><description>2021年已经过去2天了，很惭愧现在才想起来写年终总结。一是因为懒，二来也是因为觉得无事可写。但因为今天心情比较低落的的缘故，不由又打开了电</description></item><item><title>编译安装GCC12</title><link>https://www.junz.org/post/compile_install_latest_gcc/</link><pubDate>Sat, 01 Jan 2022 12:32:17 +0800</pubDate><guid>https://www.junz.org/post/compile_install_latest_gcc/</guid><description>因为想用C++20标准的原因，所以要求使用GCC12。可是Ubuntu20默认的编译器是GCC9，于是只好自己编译安装一个 GCC trunk。 没想</description></item><item><title>如何给LLVM贡献代码</title><link>https://www.junz.org/post/contribute_to_llvm/</link><pubDate>Sat, 11 Dec 2021 20:50:50 +0800</pubDate><guid>https://www.junz.org/post/contribute_to_llvm/</guid><description>LLVM 简介 LLVM的代码托管在Github，截止到这篇博客 发出时，其Bug tracker 已经从原来的Bugzilla 成功迁移到了Github issue上， 具</description></item><item><title>CSAPP第三章笔记Part 2</title><link>https://www.junz.org/post/csapp_chap3_part2/</link><pubDate>Fri, 22 Oct 2021 15:34:10 +0800</pubDate><guid>https://www.junz.org/post/csapp_chap3_part2/</guid><description>在前面简单介绍了一些常见的汇编指令，接下来我们谈一下在程序执行中一个非常重要的概念：过程 过程是软件工程中一种重要的抽象。它使得我们可以复用之</description></item><item><title>CSAPP第三章笔记Part 1</title><link>https://www.junz.org/post/csapp_chap3_part1/</link><pubDate>Sun, 10 Oct 2021 17:11:56 +0800</pubDate><guid>https://www.junz.org/post/csapp_chap3_part1/</guid><description>程序的执行 虽然我们日常使用的编程语言多种多样，但对于计算机来说，其唯一能理解的无非就是二进制，即0和1而已。 CPU的工作流程基本可以看作为控</description></item><item><title>GDB基本使用笔记</title><link>https://www.junz.org/post/gdb_basic_usage/</link><pubDate>Tue, 05 Oct 2021 14:36:52 +0800</pubDate><guid>https://www.junz.org/post/gdb_basic_usage/</guid><description>GDB简介 gdb全称GNU Debugger，是一个支持多语言的调试工具。 使用 编译时启用debug symbol 1 gcc demo.c -g 开启GDB调试 1 gdb ./a.out 调试时加入参数</description></item><item><title>读Effetive Modern C++ 之类型推导</title><link>https://www.junz.org/post/cpp_type_deduce/</link><pubDate>Wed, 11 Aug 2021 21:33:43 +0800</pubDate><guid>https://www.junz.org/post/cpp_type_deduce/</guid><description>概览 C++98 =&amp;gt; 一套规则 C++11 =&amp;gt; 新加两套，一套用于auto，一套用于decltype C++14 =&amp;gt; 拓展了语境 模板推导 1 2 template&amp;lt;typename T&amp;gt; void f(ParamType param) {} 1 f(expr) T推导的结果，不仅与实参e</description></item><item><title>给计算机新生的一封信</title><link>https://www.junz.org/post/a_letter_to_new_cs_students/</link><pubDate>Sat, 03 Jul 2021 14:20:48 +0800</pubDate><guid>https://www.junz.org/post/a_letter_to_new_cs_students/</guid><description>引子 一转眼又是一年高考结束了，想先给所有学弟学妹们说声：“恭喜！你们终于结束了炼狱般的高三，来到了听起来似乎很美好的大学生活！” 前段时间莫名</description></item><item><title>CMake学习笔记</title><link>https://www.junz.org/post/cmake_notes/</link><pubDate>Sat, 19 Jun 2021 13:24:06 +0800</pubDate><guid>https://www.junz.org/post/cmake_notes/</guid><description>CMake简介 cmake是一个跨平台的构建系统。众所周知，像C++这样的语言构建过程非常痛苦，各个不同的平台使用的工具也各不相同。在Linu</description></item><item><title>由Redis学习数据结构--字典</title><link>https://www.junz.org/post/dict_in_redis/</link><pubDate>Sat, 08 May 2021 21:21:22 +0800</pubDate><guid>https://www.junz.org/post/dict_in_redis/</guid><description>字典的定义 字典，是一种保存键值对（key value pair）的抽象数据结构。 字典中的每一个键都是独一无二的，我们可以通过键查找，更新，删除与之关联的</description></item><item><title>C++中lambda表达式基础</title><link>https://www.junz.org/post/lambda_in_cpp/</link><pubDate>Mon, 26 Apr 2021 21:25:15 +0800</pubDate><guid>https://www.junz.org/post/lambda_in_cpp/</guid><description>语法 完整语法 1 2 3 4 [ capture clause ] (parameters) -&amp;gt; return-type { definition of method } 简化语法 在没有形参的情况下，可以简化为： 1 [] { codes here... } 本质 lambda本质是一个函数对象，可以看作</description></item><item><title>由Redis学习数据结构--链表</title><link>https://www.junz.org/post/linked_list_in_redis/</link><pubDate>Wed, 14 Apr 2021 21:26:42 +0800</pubDate><guid>https://www.junz.org/post/linked_list_in_redis/</guid><description>简介 Redis是一个优秀的非关系型数据库，常常在高性能分布式系统中用于储存缓冲队列。它本身是用C语言写的，其中实现了许多基本数据类型，如安全</description></item><item><title>对Python及爬虫行业的思考</title><link>https://www.junz.org/post/thoughts_about_python_crawl/</link><pubDate>Sat, 03 Apr 2021 20:30:35 +0800</pubDate><guid>https://www.junz.org/post/thoughts_about_python_crawl/</guid><description>前言 最近在帮兄弟大学做一个关于机器学习的项目，其实我做的工作和人工智能半点关系也没有，主要就是用Python做爬虫帮他们爬取一些公开信息。其</description></item><item><title>Vim实用技巧</title><link>https://www.junz.org/post/practical_vim/</link><pubDate>Sat, 27 Mar 2021 11:04:30 +0800</pubDate><guid>https://www.junz.org/post/practical_vim/</guid><description>前言 Vim 是一款开源的老牌编辑器，有编辑器之神的美称。但是它复杂的快捷键劝退了很多人，尤其是现在市面上涌现了一大批操作简单，功能强大的IDE。但</description></item><item><title>浅谈C++中的类</title><link>https://www.junz.org/post/cpp_oop_overview/</link><pubDate>Sat, 20 Mar 2021 01:00:10 +0800</pubDate><guid>https://www.junz.org/post/cpp_oop_overview/</guid><description>类的基本思想 数据抽象 封装 接口 实现 类的性质 构造 当一个对象被创造出来，就称之为构造．构造的过程实际上是调用了类定义的构造函数 构造函数不能被声明为</description></item><item><title>简要剖析const关键字</title><link>https://www.junz.org/post/const_in_cpp/</link><pubDate>Sat, 13 Mar 2021 12:46:54 +0800</pubDate><guid>https://www.junz.org/post/const_in_cpp/</guid><description>const的作用 const关键字保证了我们的变量不会改变，成为常量． 当用在成员函数时，它保证此成员函数不会改变类中的其他成员 const用法 1</description></item><item><title>正则表达式基础总结</title><link>https://www.junz.org/post/regex_tutorial/</link><pubDate>Fri, 05 Mar 2021 20:32:06 +0800</pubDate><guid>https://www.junz.org/post/regex_tutorial/</guid><description>什么是正则表达式 正则表达式简单来理解就是一个字符串，它可以看作一个规则．通过它我们可以提取一个文本中一些具有相同模式的字符串，或者验证所给字</description></item><item><title>使用Hugo和Firebase部署个人博客</title><link>https://www.junz.org/post/hugo_firebase_deploy_blog/</link><pubDate>Mon, 01 Mar 2021 12:39:18 +0800</pubDate><guid>https://www.junz.org/post/hugo_firebase_deploy_blog/</guid><description>Hugo的使用 Hugo号称是世界上最快的构建网站的框架，我们可以简单的编写MarkDown文件，而通过Hugo进行渲染．由此便可以迅速地构建</description></item><item><title>浅谈HTTPS证书</title><link>https://www.junz.org/post/https_ssl/</link><pubDate>Mon, 01 Mar 2021 12:37:06 +0800</pubDate><guid>https://www.junz.org/post/https_ssl/</guid><description>HTTPS和SSL/TLS协议 背景 传统的http协议是明文传输的，可能遭到篡改和监控，所以引入了https协议。 原理 HTTPS实际上是&amp;qu</description></item><item><title>Linux下使用v2ray</title><link>https://www.junz.org/post/v2_in_linux/</link><pubDate>Sun, 28 Feb 2021 16:06:32 +0800</pubDate><guid>https://www.junz.org/post/v2_in_linux/</guid><description>v2ray是一个强大的代理工具，但苦于Linux下一直没有一个好用的客户端，便萌生了直接使用裸v2ray的念头．v2ray本身是不区分服务端</description></item><item><title>娱乐至死读书笔记</title><link>https://www.junz.org/post/amusing_ourselves_to_death/</link><pubDate>Sun, 28 Feb 2021 15:40:10 +0800</pubDate><guid>https://www.junz.org/post/amusing_ourselves_to_death/</guid><description>大纲 先提出媒介的重要性 简要说明文字对我们的重要性 批评电视等现代媒介对我们的影响 “印刷机”对曾经美国成功的影响 “电报”等新媒介的产生逐渐摧毁了</description></item><item><title>自控力读书笔记</title><link>https://www.junz.org/post/the_willpower_instinct/</link><pubDate>Sun, 28 Feb 2021 15:38:46 +0800</pubDate><guid>https://www.junz.org/post/the_willpower_instinct/</guid><description>意志力简述 什么是意志力 我想要 我不要 我要做 “我要做”和“我不要”是自控力的两种表现，但他们不是意志力的全部，我们还有第三种力量，那就是牢记自己</description></item><item><title>少有人走的路力读书笔记</title><link>https://www.junz.org/post/the_road_less_traveled/</link><pubDate>Sun, 28 Feb 2021 15:38:45 +0800</pubDate><guid>https://www.junz.org/post/the_road_less_traveled/</guid><description>自律 人生苦难重重。这是个伟大的真理，它的伟大之处在于，一旦我们领悟了这句话的真谛，就能从苦难中解脱出来，实现人生的超越。遗憾的是，大多数人都</description></item><item><title>Postfix &amp; Dovecot 自建邮箱服务</title><link>https://www.junz.org/post/mail_server/</link><pubDate>Sun, 28 Feb 2021 15:38:40 +0800</pubDate><guid>https://www.junz.org/post/mail_server/</guid><description>本文中example.com hostname password请修改为自己的配置 环境 系统CentOS 7 postfix dovecot mariadb opendkim nginx 安装必备软件 1 2 3 4 yum -y update &amp;amp;&amp;amp; \ yum -y install epel-release &amp;amp;&amp;amp; \ yum</description></item><item><title>Linux用户管理</title><link>https://www.junz.org/post/linux_users_management/</link><pubDate>Sun, 28 Feb 2021 15:38:30 +0800</pubDate><guid>https://www.junz.org/post/linux_users_management/</guid><description>UID与GID Linux 并不认识用户名，当我们登陆Linux系统时，系统会依据/etc/passwd和/etc/group中的内容找到用户的UID和</description></item><item><title>Linux常用命令总结</title><link>https://www.junz.org/post/linux_commonly_used_commands/</link><pubDate>Sun, 28 Feb 2021 15:38:25 +0800</pubDate><guid>https://www.junz.org/post/linux_commonly_used_commands/</guid><description>本文使用Cent OS 7 编译安装 1 2 3 ./configure make make install rpm使用 1 2 3 4 5 rpm -i xxx.rpm //安装 rpm -e xxx.rpm //卸载 rpm -qa | grep &amp;#34;xxx&amp;#34; //查询xxx rpm -v //显示执行信息 rpm -U xxx.rpm</description></item><item><title>Linux开机流程</title><link>https://www.junz.org/post/linux_boot/</link><pubDate>Sun, 28 Feb 2021 15:38:20 +0800</pubDate><guid>https://www.junz.org/post/linux_boot/</guid><description>Linux开机流程 综述 １.载入BIOS或者UFEI，进行硬件检测 2.载入硬盘第一个扇区(MBR)，读取其中的Boot Loader，载入内核，</description></item><item><title>Git学习笔记</title><link>https://www.junz.org/post/git_learning/</link><pubDate>Sun, 28 Feb 2021 15:38:15 +0800</pubDate><guid>https://www.junz.org/post/git_learning/</guid><description>本文历经几次修改，主要是我对Git的一些学习和理解。其内容主要参考Pro Git。 在经过几次重写后，我决定以问答和解释相结合的形式来总结与Gi</description></item><item><title>Linux文件与目录</title><link>https://www.junz.org/post/file_directory/</link><pubDate>Sun, 28 Feb 2021 15:38:10 +0800</pubDate><guid>https://www.junz.org/post/file_directory/</guid><description>文件 d目录 -文件 l链接文件 文件的基本权限 r 读权限，数字为4 w写权限，数字为2 x执行权限，数字为1 目录只有具备x权限时才能进入 文件的隐藏权限 c</description></item><item><title>Linux硬盘管理</title><link>https://www.junz.org/post/disk_management/</link><pubDate>Sun, 28 Feb 2021 15:38:05 +0800</pubDate><guid>https://www.junz.org/post/disk_management/</guid><description>新增硬盘基本步骤 创建磁盘分区 格式化分区，创建文件系统 挂载到某一目录下 磁盘分区 在Linux中一切皆文件，包括硬盘和分区，他们都位于/dev目录</description></item><item><title>Linux服务浅谈</title><link>https://www.junz.org/post/daemons/</link><pubDate>Sun, 28 Feb 2021 15:35:10 +0800</pubDate><guid>https://www.junz.org/post/daemons/</guid><description>systemctl相关命令 1 2 3 4 5 systemctl start daemon //启动一个服务 systemctl stop daemon //停止一个服务 systemctl enable daemon //开机自启动 systemctl disable daemon //取消开机自启动 systemctl restart daemon //重新启</description></item></channel></rss>